service: simpleshop
frameworkVersion: '2'

plugins:
  - serverless-step-functions

provider:
  name: aws
  runtime: nodejs12.x

  stage: dev
  region: us-east-1
  memorySize: 128
  timeout: 3

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - s3:GetObject
        - s3:PutObject
      Resource:
        - !Join [ '/', [!GetAtt ReportsBucket.Arn, '*'] ]
    - Effect: "Allow"
      Action:
        - "ses:SendBulkTemplatedEmail"
        - "ses:SendBulkEmail"
        - "ses:SendTemplatedEmail"
        - "ses:sendEmail"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:Query"
      Resource: 
        - !GetAtt DataTable.Arn
        - !Join [ '/', [!GetAtt DataTable.Arn, 'index', '*'] ]

  environment:
    REPORTSBUCKET: !Ref ReportsBucket
    REPORTTEMPLATE: !Ref ReportTemplate
    ORDERTEMPLATE: !Ref OrderTemplate
    SHIPPEDTEMPLATE: !Ref ShippedTemplate
    DATATABLE: !Ref DataTable
    FROMEMAIL: test@test.com


functions:
  ValidateOrder:
    handler: src/lambdas/ValidateOrder.handler
  PlaceOrder:
    handler: src/lambdas/PlaceOrder.handler
  EmailOrder:
    handler: src/lambdas/EmailOrder.handler
  ShipOrder:
    handler: src/lambdas/ShipOrder.handler
  EmailShipped:
    handler: src/lambdas/EmailShipped.handler
  GenerateReport:
    handler: src/lambdas/GenerateReport.handler
  EmailReport:
    handler: src/lambdas/EmailReport.handler

stepFunctions:
  stateMachines:
    generateReport:
      events:
        - schedule:
            rate: cron(0 0 * * ? *)
            enabled: false
      name: dailyReportsStateMachine
      definition:
        Comment: "Generates daily sales reports."
        StartAt: GenerateReport
        States:
          GenerateReport:
            Type: Task
            Resource: !GetAtt GenerateReport.Arn
            Next: EmailReport
          EmailReport:
            Type: Task
            Resource: !GetAtt EmailReport.Arn
            End: true
    placeOrder:
      name: placeOrderStateMachine
      definition:
        Comment: "Places and order, updates inventory, ships order"
        StartAt: ValidateOrder
        States:
          ValidateOrder:
            Type: Task
            Resource: !GetAtt ValidateOrder.Arn
            Next: ChoiceState1
          ChoiceState1:
            Type: Choice
            Choices:
              - Variable: "$.isValid"
                BooleanEquals: true
                Next: PlaceOrder
            Default: InvalidOrder
          InvalidOrder:
            Type: Fail
            Cause: "Invalid order"
          PlaceOrder:
            Type: Task
            Resource: !GetAtt PlaceOrder.Arn
            Next: EmailOrder
          EmailOrder:
            Type: Task
            Resource: !GetAtt EmailOrder.Arn
            Next: ShipOrder
          ShipOrder:
            Type: Task
            Resource: !GetAtt ShipOrder.Arn
            Next: EmailShipped
          EmailShipped:
            Type: Task
            Resource: !GetAtt EmailShipped.Arn
            End: true

resources:
  Resources:
    ReportsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: broswen-simpleshop-reports
    DataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "PK"
            AttributeType: "S"
          - AttributeName: "SK"
            AttributeType: "S"
          - AttributeName: "PK1"
            AttributeType: "S"
          - AttributeName: "SK1"
            AttributeType: "S"
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: "PK1"
                KeyType: "HASH"
              - AttributeName: "SK1"
                KeyType: "RANGE"
            Projection:
              ProjectionType: ALL
        KeySchema:
          - AttributeName: "PK"
            KeyType: "HASH"
          - AttributeName: "SK"
            KeyType: "RANGE"
        TableName: SimpleShopData
        BillingMode: PAY_PER_REQUEST

    ReportTemplate:
        Type: AWS::SES::Template
        Properties:
          Template:
              HtmlPart: "The report for {{date}} has generated, The file is {{key}}"
              SubjectPart: Automated Report
              TemplateName: ReportTemplate 
              TextPart: "The report for {{date}} has generated, The file is {{key}}"
    OrderTemplate:
        Type: AWS::SES::Template
        Properties:
          Template:
              HtmlPart: "Your order {{id}} has been completed! You will get an email when it ships."
              SubjectPart: Order confirmed
              TemplateName: OrderTemplate 
              TextPart: "Your order {{id}} has been completed! You will get an email when it ships."
    ShippedTemplate:
        Type: AWS::SES::Template
        Properties:
          Template:
              HtmlPart: "Your order {{id}} has shipped! The tracking number is {{shippinglabel}}"
              SubjectPart: Your order has shipped!
              TemplateName: ShippedTemplate 
              TextPart: "Your order {{id}} has shipped! The tracking number is {{shippinglabel}}"